import unittest
from unittest.mock import patch, MagicMock
from advanced_modules.human_lag_exploit import HumanLagExploit
import logging

class TestHumanLagExploit(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.valid_data = {
            "OrderBookDelay": 0.87,
            "PriceSlippage": 0.92
        }
        cls.invalid_data = {
            "Invalid1": 1.5,
            "Invalid2": -0.1
        }

    def setUp(self):
        self.hle = HumanLagExploit()

    def test_successful_detection(self):
        """Test normal operation with valid data"""
        with self.assertLogs('HumanLagExploit', level='INFO'):
            result = self.hle.detect(self.valid_data)
        self.assertTrue(result)
        self.assertEqual(len(self.hle.detected_patterns), 2)

    def test_invalid_confidence(self):
        """Test invalid confidence values"""
        with self.assertLogs('HumanLagExploit', level='ERROR') as cm:
            result = self.hle.detect(self.invalid_data)
        self.assertFalse(result)
        self.assertIn('Invalid confidence', str(cm.output))

    @patch('encryption.xmss_encryption.XMSSEncryption.encrypt')
    def test_encryption_failure(self, mock_encrypt):
        """Test encryption failure fallback"""
        mock_encrypt.side_effect = Exception("Quantum encryption failed")
        with self.assertLogs('HumanLagExploit', level='ERROR') as cm:
            result = self.hle.detect({"TestPattern": 0.5})
        
        self.assertFalse(result)
        self.assertEqual(self.hle.detected_patterns["TestPattern"], 
                        self.hle.failover_key)
        self.assertIn('Failover mechanism activated', str(cm.output))

    def test_traceback_logging(self):
        """Verify complete traceback logging"""
        with patch.object(self.hle.encryption_engine, 'encrypt', 
                         side_effect=Exception("Test error")):
            with self.assertLogs('HumanLagExploit', level='ERROR') as cm:
                self.hle.detect({"Test": 0.5})
                
        log_output = '\n'.join(cm.output)
        self.assertIn('Traceback', log_output)
        self.assertIn('Test error', log_output)

if __name__ == '__main__':
    unittest.main()
