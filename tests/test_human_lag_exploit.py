import unittest
from unittest.mock import patch, MagicMock
from advanced_modules.human_lag_exploit import HumanLagExploit
from tests.mock_algorithm import MockAlgorithm
import logging
import pandas as pd
import numpy as np

class TestHumanLagExploit(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.valid_data = {
            "OrderBookDelay": 0.87,
            "PriceSlippage": 0.92
        }
        cls.invalid_data = {
            "Invalid1": 1.5,
            "Invalid2": -0.1
        }

    def setUp(self):
        self.mock_algorithm = MockAlgorithm()
        self.hle = HumanLagExploit(self.mock_algorithm)
        self.mock_history_data = self._create_mock_history_data()
        
    def _create_mock_history_data(self):
        dates = pd.date_range(start='2023-01-01', periods=100, freq='1min')
        return {
            "1m": pd.DataFrame({
                'Open': np.random.normal(100, 2, 100),
                'High': np.random.normal(102, 2, 100),
                'Low': np.random.normal(98, 2, 100),
                'Close': np.random.normal(101, 2, 100),
                'Volume': np.random.normal(1000000, 200000, 100)
            }, index=dates)
        }

    def test_successful_detection(self):
        """Test normal operation with valid data"""
        result = self.hle.detect('SPY', self.mock_history_data)
        self.assertIsInstance(result, dict)
        if isinstance(result, dict):
            self.assertIn('detected', result)

    def test_invalid_confidence(self):
        """Test invalid confidence values"""
        empty_data = {"1m": pd.DataFrame()}
        result = self.hle.detect('SPY', empty_data)
        self.assertIsInstance(result, dict)
        if isinstance(result, dict):
            self.assertFalse(result['detected'])

    @patch('encryption.xmss_encryption.XMSSEncryption.encrypt')
    def test_encryption_failure(self, mock_encrypt):
        """Test encryption failure fallback"""
        mock_encrypt.side_effect = Exception("Quantum encryption failed")
        result = self.hle.detect('SPY', self.mock_history_data)
        
        self.assertIsInstance(result, (dict, bool))

    def test_traceback_logging(self):
        """Verify complete traceback logging"""
        with patch.object(self.hle.encryption_engine, 'encrypt', 
                         side_effect=Exception("Test error")):
            result = self.hle.detect('SPY', self.mock_history_data)
                
        self.assertIsInstance(result, (dict, bool))

if __name__ == '__main__':
    unittest.main()
