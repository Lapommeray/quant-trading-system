version: '3.8'

services:
  qts-api:
    build: .
    container_name: qts-api
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8501:8501"
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      - QTS_ENV=docker
    command: --mode api
    restart: unless-stopped
    networks:
      - qts_network
    depends_on:
      - postgres
      - redis

  qts-dashboard:
    build: .
    container_name: qts-dashboard
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8502:8501"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=/app
      - QTS_ENV=docker
    command: --mode dashboard
    restart: unless-stopped
    networks:
      - qts_network
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:13
    container_name: qts-postgres
    environment:
      - POSTGRES_DB=qts_db
      - POSTGRES_USER=qts_user
      - POSTGRES_PASSWORD=qts_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - qts_network

  redis:
    image: redis:7-alpine
    container_name: qts-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - qts_network

  prometheus:
    image: prom/prometheus:latest
    container_name: qts-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - qts_network

  grafana:
    image: grafana/grafana:latest
    container_name: qts-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - qts_network
    depends_on:
      - prometheus

networks:
  qts_network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
